{"version":3,"mappings":"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","names":["LazySimpleAnalyticsWidget","lazy","__vitePreload","m","LazyCancellationTracker","LazyAdminTierStats","LazyOpenAIApiStats","LazyUserRequestLimits","LazyAdminSEOSettings","n","LazyBrandAssetsManager","LazyColorManagement","LazyPromptManagement","LazyPaymentProviderSettings","LazyAdminTimelineSettings","AdminComponentWrapper","children","Suspense","jsx","LoadingSpinner","SimpleAnalyticsWidget","CancellationTracker","AdminTierStats","OpenAIApiStats","UserRequestLimits","AdminSEOSettings","BrandAssetsManager","ColorManagement","PromptManagement","PaymentProviderSettings","AdminTimelineSettings","AdminFoodChatSettings","settings","setSettings","useState","loading","setLoading","saving","setSaving","useEffect","loadSettings","data","error","supabase","settingsMap","acc","item","toast","saveSettings","updates","update","Card","jsxs","CardHeader","CardTitle","CardDescription","CardContent","Loader2","Label","Switch","checked","prev","Textarea","e","Input","Button","AdminOverview","usageStats","setUsageStats","sharedApiKey","setSharedApiKey","stripeApiKey","setStripeApiKey","gaTrackingId","setGaTrackingId","showAdvancedSettings","setShowAdvancedSettings","imageAnalysisEnabled","setImageAnalysisEnabled","useToast","fetchAdminData","usersData","usersError","settingsData","settingsError","setting","stats","user","lastWeek","sum","saveApiKey","saveGaTrackingId","saveImageAnalysisFlag","enabled","AdminRoleTester","Collapsible","CollapsibleTrigger","Settings","ChevronUp","ChevronDown","CollapsibleContent","val","AdminQuoteSettings"],"ignoreList":[],"sources":["../../src/components/LazyAdminComponents.tsx","../../src/components/AdminFoodChatSettings.tsx","../../src/pages/AdminOverview.tsx"],"sourcesContent":["// Lazy-loaded admin components to reduce initial bundle size\r\nimport { lazy, Suspense } from 'react';\r\nimport { LoadingSpinner } from './LoadingSpinner';\r\n\r\n// Lazy load admin-only components\r\nconst LazySimpleAnalyticsWidget = lazy(() => import('./SimpleAnalyticsWidget').then(m => ({ default: m.SimpleAnalyticsWidget })));\r\nconst LazyCancellationTracker = lazy(() => import('./CancellationTracker').then(m => ({ default: m.CancellationTracker })));\r\nconst LazyAdminTierStats = lazy(() => import('./AdminTierStats').then(m => ({ default: m.AdminTierStats })));\r\nconst LazyOpenAIApiStats = lazy(() => import('./OpenAIApiStats').then(m => ({ default: m.OpenAIApiStats })));\r\nconst LazyUserRequestLimits = lazy(() => import('./UserRequestLimits').then(m => ({ default: m.UserRequestLimits })));\r\nconst LazyAdminSEOSettings = lazy(() => import('./AdminSEOSettings').then(m => ({ default: m.AdminSEOSettings })));\r\nconst LazyBrandAssetsManager = lazy(() => import('./BrandAssetsManager'));\r\nconst LazyColorManagement = lazy(() => import('./ColorManagement').then(m => ({ default: m.ColorManagement })));\r\nconst LazyPromptManagement = lazy(() => import('./PromptManagement').then(m => ({ default: m.PromptManagement })));\r\nconst LazyPaymentProviderSettings = lazy(() => import('./PaymentProviderSettings').then(m => ({ default: m.PaymentProviderSettings })));\r\nconst LazyAdminTimelineSettings = lazy(() => import('./AdminTimelineSettings').then(m => ({ default: m.AdminTimelineSettings })));\r\n\r\nconst AdminComponentWrapper = ({ children }: { children: React.ReactNode }) => (\r\n  <Suspense fallback={\r\n    <div className=\"flex items-center justify-center p-6\">\r\n      <LoadingSpinner />\r\n    </div>\r\n  }>\r\n    {children}\r\n  </Suspense>\r\n);\r\n\r\nexport const SimpleAnalyticsWidget = () => (\r\n  <AdminComponentWrapper>\r\n    <LazySimpleAnalyticsWidget />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const CancellationTracker = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyCancellationTracker />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const AdminTierStats = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyAdminTierStats />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const OpenAIApiStats = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyOpenAIApiStats />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const UserRequestLimits = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyUserRequestLimits />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const AdminSEOSettings = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyAdminSEOSettings />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const BrandAssetsManager = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyBrandAssetsManager />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const ColorManagement = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyColorManagement />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const PromptManagement = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyPromptManagement />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const PaymentProviderSettings = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyPaymentProviderSettings />\r\n  </AdminComponentWrapper>\r\n);\r\n\r\nexport const AdminTimelineSettings = () => (\r\n  <AdminComponentWrapper>\r\n    <LazyAdminTimelineSettings />\r\n  </AdminComponentWrapper>\r\n);","import { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { toast } from 'sonner';\r\nimport { Loader2 } from 'lucide-react';\r\n\r\ninterface ChatSettings {\r\n  strictMode: boolean;\r\n  redirectMessage: string;\r\n  allowedTopics: string;\r\n}\r\n\r\nexport function AdminFoodChatSettings() {\r\n  const [settings, setSettings] = useState<ChatSettings>({\r\n    strictMode: true,\r\n    redirectMessage: \"I'm your food tracking assistant. I can help you log meals, analyze nutrition, and manage your food library. Let's keep our conversation focused on food and nutrition topics!\",\r\n    allowedTopics: \"food,nutrition,meals,calories,carbs,diet,health,cooking,ingredients,recipes\"\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadSettings();\r\n  }, []);\r\n\r\n  const loadSettings = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('shared_settings')\r\n        .select('setting_key, setting_value')\r\n        .in('setting_key', ['food_chat_strict_mode', 'food_chat_redirect_message', 'food_chat_allowed_topics']);\r\n\r\n      if (error) throw error;\r\n\r\n      const settingsMap = data?.reduce((acc, item) => {\r\n        acc[item.setting_key] = item.setting_value;\r\n        return acc;\r\n      }, {} as Record<string, string>) || {};\r\n\r\n      setSettings({\r\n        strictMode: settingsMap.food_chat_strict_mode === 'true',\r\n        redirectMessage: settingsMap.food_chat_redirect_message || settings.redirectMessage,\r\n        allowedTopics: settingsMap.food_chat_allowed_topics || settings.allowedTopics\r\n      });\r\n    } catch (error) {\r\n      console.error('Error loading chat settings:', error);\r\n      toast.error('Failed to load chat settings');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveSettings = async () => {\r\n    setSaving(true);\r\n    try {\r\n      const updates = [\r\n        { setting_key: 'food_chat_strict_mode', setting_value: settings.strictMode.toString() },\r\n        { setting_key: 'food_chat_redirect_message', setting_value: settings.redirectMessage },\r\n        { setting_key: 'food_chat_allowed_topics', setting_value: settings.allowedTopics }\r\n      ];\r\n\r\n      for (const update of updates) {\r\n        const { error } = await supabase\r\n          .from('shared_settings')\r\n          .upsert(update, { onConflict: 'setting_key' });\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      toast.success('Chat settings updated successfully');\r\n    } catch (error) {\r\n      console.error('Error saving chat settings:', error);\r\n      toast.error('Failed to save chat settings');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Food Chat Settings</CardTitle>\r\n          <CardDescription>Configure AI chat behavior and guardrails</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center py-8\">\r\n          <Loader2 className=\"h-6 w-6 animate-spin\" />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle>Food Chat Settings</CardTitle>\r\n        <CardDescription>\r\n          Configure AI chat behavior and topic guardrails for the food tracking assistant\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"space-y-0.5\">\r\n            <Label htmlFor=\"strict-mode\">Strict Mode</Label>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              When enabled, the AI will strictly enforce food-related topics and redirect off-topic conversations\r\n            </p>\r\n          </div>\r\n          <Switch\r\n            id=\"strict-mode\"\r\n            checked={settings.strictMode}\r\n            onCheckedChange={(checked) => \r\n              setSettings(prev => ({ ...prev, strictMode: checked }))\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"redirect-message\">Redirect Message</Label>\r\n          <Textarea\r\n            id=\"redirect-message\"\r\n            placeholder=\"Message to show when users ask about off-topic subjects...\"\r\n            value={settings.redirectMessage}\r\n            onChange={(e) => \r\n              setSettings(prev => ({ ...prev, redirectMessage: e.target.value }))\r\n            }\r\n            rows={4}\r\n          />\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            This message will be shown when users ask about non-food topics (only when strict mode is enabled)\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          <Label htmlFor=\"allowed-topics\">Allowed Topics</Label>\r\n          <Input\r\n            id=\"allowed-topics\"\r\n            placeholder=\"food,nutrition,meals,calories...\"\r\n            value={settings.allowedTopics}\r\n            onChange={(e) => \r\n              setSettings(prev => ({ ...prev, allowedTopics: e.target.value }))\r\n            }\r\n          />\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Comma-separated list of allowed conversation topics (used by AI to determine relevance)\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex gap-2\">\r\n          <Button \r\n            onClick={saveSettings} \r\n            disabled={saving}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            {saving && <Loader2 className=\"h-4 w-4 animate-spin\" />}\r\n            Save\r\n          </Button>\r\n          <Button \r\n            variant=\"outline\" \r\n            onClick={loadSettings}\r\n            disabled={saving}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { ChevronDown, ChevronUp, Settings } from 'lucide-react';\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\nimport { \r\n  AdminTierStats,\r\n  ColorManagement,\r\n  OpenAIApiStats,\r\n  UserRequestLimits,\r\n  SimpleAnalyticsWidget,\r\n  AdminSEOSettings,\r\n  CancellationTracker,\r\n  BrandAssetsManager,\r\n  PromptManagement,\r\n  PaymentProviderSettings,\r\n  AdminTimelineSettings\r\n} from \"@/components/LazyAdminComponents\";\r\nimport { AdminRoleTester } from '@/components/AdminRoleTester';\r\nimport { AdminFoodChatSettings } from '@/components/AdminFoodChatSettings';\r\n\r\nimport { AdminQuoteSettings } from '@/components/AdminQuoteSettings';\r\n\r\n\r\ninterface User {\r\n  user_id: string;\r\n  display_name: string;\r\n  is_paid_user: boolean;\r\n  monthly_ai_requests: number;\r\n  created_at: string;\r\n  subscription_status: string;\r\n  user_tier: string;\r\n}\r\n\r\ninterface UsageStats {\r\n  total_users: number;\r\n  active_users: number;\r\n  paid_users: number;\r\n  total_requests: number;\r\n}\r\n\r\nconst AdminOverview = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [usageStats, setUsageStats] = useState<UsageStats>({\r\n    total_users: 0,\r\n    active_users: 0,\r\n    paid_users: 0,\r\n    total_requests: 0\r\n  });\r\n  const [sharedApiKey, setSharedApiKey] = useState('');\r\n  const [stripeApiKey, setStripeApiKey] = useState('');\r\n  const [gaTrackingId, setGaTrackingId] = useState('');\r\n  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);\r\n  const [imageAnalysisEnabled, setImageAnalysisEnabled] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    fetchAdminData();\r\n  }, []);\r\n\r\n  const fetchAdminData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch users from profiles table for stats only\r\n      const { data: usersData, error: usersError } = await supabase\r\n        .from('profiles')\r\n        .select('user_id, is_paid_user, monthly_ai_requests, created_at')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (usersError) {\r\n        console.error('Error fetching users:', usersError);\r\n      }\r\n\r\n      // Fetch shared settings\r\n      const { data: settingsData, error: settingsError } = await supabase\r\n        .from('shared_settings')\r\n        .select('setting_key, setting_value')\r\n        .in('setting_key', ['shared_api_key', 'stripe_api_key', 'ga_tracking_id', 'ai_image_analysis_enabled']);\r\n\r\n      if (settingsError) {\r\n        console.error('Error fetching settings:', settingsError);\r\n      } else if (settingsData) {\r\n        settingsData.forEach(setting => {\r\n          if (setting.setting_key === 'shared_api_key') {\r\n            setSharedApiKey(setting.setting_value || '');\r\n          } else if (setting.setting_key === 'stripe_api_key') {\r\n            setStripeApiKey(setting.setting_value || '');\r\n          } else if (setting.setting_key === 'ga_tracking_id') {\r\n            setGaTrackingId(setting.setting_value || '');\r\n          } else if (setting.setting_key === 'ai_image_analysis_enabled') {\r\n            setImageAnalysisEnabled(String(setting.setting_value).toLowerCase() === 'true');\r\n          }\r\n        });\r\n      }\r\n\r\n      // Calculate usage stats\r\n      if (usersData) {\r\n        const stats = {\r\n          total_users: usersData.length,\r\n          active_users: usersData.filter(user => {\r\n            const lastWeek = new Date();\r\n            lastWeek.setDate(lastWeek.getDate() - 7);\r\n            return new Date(user.created_at) > lastWeek;\r\n          }).length,\r\n          paid_users: usersData.filter(user => user.is_paid_user).length,\r\n          total_requests: usersData.reduce((sum, user) => sum + (user.monthly_ai_requests || 0), 0)\r\n        };\r\n        setUsageStats(stats);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching admin data:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch admin data\",\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveApiKey = async () => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('shared_settings')\r\n        .upsert({\r\n          setting_key: 'shared_api_key',\r\n          setting_value: sharedApiKey,\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"API key saved successfully\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving API key:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to save API key\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const saveStripeApiKey = async () => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('shared_settings')\r\n        .upsert({\r\n          setting_key: 'stripe_api_key',\r\n          setting_value: stripeApiKey,\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Stripe API key saved successfully\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving Stripe API key:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to save Stripe API key\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const saveGaTrackingId = async () => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('shared_settings')\r\n        .upsert({\r\n          setting_key: 'ga_tracking_id',\r\n          setting_value: gaTrackingId,\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Google Analytics tracking ID saved successfully\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving GA tracking ID:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to save Google Analytics tracking ID\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const saveImageAnalysisFlag = async (enabled: boolean) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('shared_settings')\r\n        .upsert({\r\n          setting_key: 'ai_image_analysis_enabled',\r\n          setting_value: enabled ? 'true' : 'false',\r\n        });\r\n      if (error) throw error;\r\n      toast({ title: 'Saved', description: 'Image analysis testing flag updated.' });\r\n    } catch (error) {\r\n      toast({ title: 'Error', description: 'Failed to save setting', variant: 'destructive' });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return null; // Let ProtectedRoute handle loading\r\n  }\r\n\r\n  return (\r\n    <main className=\"container mx-auto p-6 space-y-8 overflow-x-hidden bg-background min-h-[calc(100vh-80px)]\" role=\"main\">\r\n      <div className=\"flex items-center justify-center pt-6 pb-4\">\r\n        <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-primary-glow bg-clip-text text-transparent text-center\">\r\n          Admin Dashboard\r\n        </h1>\r\n      </div>\r\n      \r\n      {/* Role Testing Section */}\r\n      <section aria-label=\"Role testing\">\r\n        <AdminRoleTester />\r\n      </section>\r\n      \r\n      {/* Real-Time Analytics Dashboard */}\r\n      <section aria-label=\"Real-time analytics\">\r\n        <SimpleAnalyticsWidget />\r\n      </section>\r\n      \r\n      {/* SEO Settings */}\r\n      <section aria-label=\"SEO settings\">\r\n        <AdminSEOSettings />\r\n      </section>\r\n      \r\n      {/* Cancellation Tracking */}\r\n      <section aria-label=\"Cancellation tracking\">\r\n        <CancellationTracker />\r\n      </section>\r\n      \r\n      {/* Most Important Metric - User Tiers Overview */}\r\n      <section aria-label=\"User tiers overview\">\r\n        <AdminTierStats />\r\n      </section>\r\n      \r\n      {/* User Request Limits */}\r\n      <section aria-label=\"User request limits\">\r\n        <UserRequestLimits />\r\n      </section>\r\n      \r\n      {/* API Configuration - Full Width Cards */}\r\n      <section className=\"space-y-6\" aria-labelledby=\"api-config\">\r\n        <h2 id=\"api-config\" className=\"text-2xl font-semibold text-foreground\">API Configuration</h2>\r\n        \r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\r\n              OpenAI API Key\r\n            </CardTitle>\r\n            <CardDescription>\r\n              Configure the shared OpenAI API key used for AI-powered features across the platform\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"apiKey\" className=\"text-sm font-medium\">API Key</Label>\r\n              <Input\r\n                id=\"apiKey\"\r\n                type=\"password\"\r\n                value={sharedApiKey}\r\n                onChange={(e) => setSharedApiKey(e.target.value)}\r\n                placeholder=\"sk-...\"\r\n                className=\"font-mono text-sm\"\r\n              />\r\n            </div>\r\n            <Button onClick={saveApiKey} variant=\"action-secondary\" size=\"action-secondary\" className=\"w-full sm:w-auto\">\r\n              Save\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* OpenAI API Statistics */}\r\n        <OpenAIApiStats />\r\n      </section>\r\n\r\n      {/* Payment & Analytics Configuration */}\r\n      <section className=\"space-y-6\" aria-labelledby=\"payment-analytics\">\r\n        <h2 id=\"payment-analytics\" className=\"text-2xl font-semibold text-foreground\">Payment & Analytics</h2>\r\n        \r\n        {/* Payment Provider Configuration */}\r\n        <PaymentProviderSettings />\r\n\r\n        {/* Google Analytics - moved here */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-xl font-semibold\">Google Analytics</CardTitle>\r\n            <CardDescription>\r\n              Configure Google Analytics tracking ID for real-time analytics data\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"gaTrackingId\" className=\"text-sm font-medium\">Measurement ID</Label>\r\n              <Input\r\n                id=\"gaTrackingId\"\r\n                type=\"text\"\r\n                value={gaTrackingId}\r\n                onChange={(e) => setGaTrackingId(e.target.value)}\r\n                placeholder=\"G-XXXXXXXXXX\"\r\n                className=\"font-mono text-sm\"\r\n              />\r\n            </div>\r\n            <div className=\"flex gap-2\">\r\n              <Button onClick={saveGaTrackingId} variant=\"action-secondary\" size=\"action-secondary\" className=\"flex-1 sm:flex-none\">\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </section>\r\n\r\n      {/* Advanced Settings */}\r\n      <section className=\"space-y-6\" aria-label=\"Advanced settings\">\r\n        <Collapsible open={showAdvancedSettings} onOpenChange={setShowAdvancedSettings}>\r\n          <CollapsibleTrigger asChild>\r\n            <Button variant=\"ghost\" className=\"w-full justify-between text-foreground hover:bg-muted\">\r\n              <span className=\"flex items-center gap-2\">\r\n                <Settings className=\"w-4 h-4\" />\r\n                Advanced Settings\r\n              </span>\r\n              {showAdvancedSettings ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />}\r\n            </Button>\r\n          </CollapsibleTrigger>\r\n          <CollapsibleContent className=\"space-y-6 mt-6\">\r\n            {/* AI Prompt Configuration */}\r\n            <PromptManagement />\r\n\r\n            {/* Food Chat Settings */}\r\n            <AdminFoodChatSettings />\r\n\r\n            {/* Image Analysis Testing (Admin-only) */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-xl font-semibold\">Image Analysis (Admin Testing)</CardTitle>\r\n                <CardDescription>\r\n                  Enable the camera/upload button in AI Chat for admins only. Users will not see this.\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"flex items-center justify-between\">\r\n                <div className=\"space-y-1\">\r\n                  <div className=\"text-sm font-medium\">Enable admin-only image analysis</div>\r\n                  <div className=\"text-xs text-muted-foreground\">Toggles `ai_image_analysis_enabled` in shared settings</div>\r\n                </div>\r\n                <Switch\r\n                  checked={imageAnalysisEnabled}\r\n                  onCheckedChange={(val) => {\r\n                    setImageAnalysisEnabled(val);\r\n                    saveImageAnalysisFlag(val);\r\n                  }}\r\n                  aria-label=\"Toggle admin-only image analysis\"\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </CollapsibleContent>\r\n        </Collapsible>\r\n      </section>\r\n\r\n      {/* Quote Management */}\r\n      <section aria-label=\"Quote management\">\r\n        <AdminQuoteSettings />\r\n      </section>\r\n\r\n      {/* Timeline Management */}\r\n      <section aria-label=\"Timeline management\">\r\n        <AdminTimelineSettings />\r\n      </section>\r\n\r\n      {/* Brand Customization */}\r\n      <section className=\"space-y-6 pb-24\" aria-labelledby=\"brand-customization\">\r\n        <h2 id=\"brand-customization\" className=\"text-2xl font-semibold text-foreground\">Brand Customization</h2>\r\n        \r\n        {/* Brand Assets - Favicon and Logo */}\r\n        <BrandAssetsManager />\r\n        \r\n        {/* Color Management */}\r\n        <ColorManagement />\r\n        \r\n        {/* Extra spacer to ensure nav doesn't cover content */}\r\n        <div className=\"h-8\"></div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default AdminOverview;"],"file":"assets/AdminOverview-D5zbDRjt.js"}