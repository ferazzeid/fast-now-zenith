{"version":3,"file":"AdminTimelineSettings-8osABjMu.js","sources":["../../src/components/AdminTimelineSettings.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Plus, Edit, Trash2, Save, X, Clock } from 'lucide-react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { FastingTimelineV2 } from '@/components/FastingTimelineV2';\r\nimport { useQueryClient } from '@tanstack/react-query';\r\nimport { useFastingHoursQuery, fastingHoursKey } from '@/hooks/optimized/useFastingHoursQuery';\r\ninterface FastingHour {\r\n  id?: string;\r\n  hour: number;\r\n  day: number;\r\n  title: string;\r\n  body_state: string;\r\n  encouragement?: string;\r\n  tips?: string[];\r\n  phase: string;\r\n  difficulty: string;\r\n  common_feelings?: string[];\r\n  scientific_info?: string;\r\n  autophagy_milestone?: boolean;\r\n  ketosis_milestone?: boolean;\r\n  fat_burning_milestone?: boolean;\r\n  // Enhanced fields\r\n  benefits_challenges?: string;\r\n  content_snippet?: string;\r\n  content_rotation_data?: {\r\n    current_index: number;\r\n    variants: Array<{\r\n      type: 'metabolic' | 'physiological' | 'mental' | 'benefits' | 'snippet' | 'stage' | 'encouragement' | 'admin_personal_log';\r\n      content: string;\r\n    }>;\r\n  };\r\n  metabolic_changes?: string;\r\n  physiological_effects?: string;\r\n  mental_emotional_state?: string[];\r\n  stage?: string;\r\n}\r\n\r\ninterface FastingHourEditModalProps {\r\n  fastingHour?: FastingHour;\r\n  isOpen: boolean;\r\n  onSave: (fastingHour: FastingHour) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nconst FastingHourEditModal: React.FC<FastingHourEditModalProps> = ({\r\n  fastingHour,\r\n  isOpen,\r\n  onSave,\r\n  onClose\r\n}) => {\r\n  const [formData, setFormData] = useState<FastingHour>({\r\n    hour: 1,\r\n    day: 1,\r\n    title: '',\r\n    body_state: '',\r\n    encouragement: '',\r\n    tips: [],\r\n    phase: 'preparation',\r\n    difficulty: 'easy',\r\n    common_feelings: [],\r\n    scientific_info: '',\r\n    autophagy_milestone: false,\r\n    ketosis_milestone: false,\r\n    fat_burning_milestone: false\r\n  });\r\n  const [tipsInput, setTipsInput] = useState('');\r\n  const [feelingsInput, setFeelingsInput] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (fastingHour) {\r\n      setFormData(fastingHour);\r\n      setTipsInput(fastingHour.tips?.join('\\n') || '');\r\n      setFeelingsInput(fastingHour.common_feelings?.join(', ') || '');\r\n    } else {\r\n      setFormData({\r\n        hour: 1,\r\n        day: 1,\r\n        title: '',\r\n        body_state: '',\r\n        encouragement: '',\r\n        tips: [],\r\n        phase: 'preparation',\r\n        difficulty: 'easy',\r\n        common_feelings: [],\r\n        scientific_info: '',\r\n        autophagy_milestone: false,\r\n        ketosis_milestone: false,\r\n        fat_burning_milestone: false\r\n      });\r\n      setTipsInput('');\r\n      setFeelingsInput('');\r\n    }\r\n  }, [fastingHour, isOpen]);\r\n\r\n  const handleSave = () => {\r\n    const tips = tipsInput.split('\\n').filter(tip => tip.trim() !== '');\r\n    const feelings = feelingsInput.split(',').map(f => f.trim()).filter(f => f !== '');\r\n    \r\n    onSave({\r\n      ...formData,\r\n      tips,\r\n      common_feelings: feelings\r\n    });\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle>\r\n            {fastingHour ? 'Edit Hour Timeline' : 'Create Hour Timeline'}\r\n          </DialogTitle>\r\n          <DialogDescription>\r\n            Customize the information shown for each hour of fasting.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Hour</label>\r\n              <Input\r\n                type=\"number\"\r\n                min={1}\r\n                max={72}\r\n                value={formData.hour}\r\n                onChange={(e) => {\r\n                  const hour = parseInt(e.target.value) || 1;\r\n                  setFormData(prev => ({ \r\n                    ...prev, \r\n                    hour,\r\n                    day: Math.ceil(hour / 24)\r\n                  }));\r\n                }}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Day</label>\r\n              <Input\r\n                type=\"number\"\r\n                min={1}\r\n                max={3}\r\n                value={formData.day}\r\n                onChange={(e) => setFormData(prev => ({ ...prev, day: parseInt(e.target.value) || 1 }))}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Phase</label>\r\n              <Select \r\n                value={formData.phase} \r\n                onValueChange={(value) => setFormData(prev => ({ ...prev, phase: value }))}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"preparation\">Preparation</SelectItem>\r\n                  <SelectItem value=\"adaptation\">Adaptation</SelectItem>\r\n                  <SelectItem value=\"fat_burning\">Fat Burning</SelectItem>\r\n                  <SelectItem value=\"deep_ketosis\">Deep Ketosis</SelectItem>\r\n                  <SelectItem value=\"autophagy\">Autophagy</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div>\r\n              <label className=\"text-sm font-medium\">Difficulty</label>\r\n              <Select \r\n                value={formData.difficulty} \r\n                onValueChange={(value) => setFormData(prev => ({ ...prev, difficulty: value }))}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"easy\">Easy</SelectItem>\r\n                  <SelectItem value=\"moderate\">Moderate</SelectItem>\r\n                  <SelectItem value=\"hard\">Hard</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"text-sm font-medium\">Title</label>\r\n            <Input\r\n              value={formData.title}\r\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\r\n              placeholder=\"e.g., Initial Hunger Pangs\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"text-sm font-medium\">Body State</label>\r\n            <Textarea\r\n              value={formData.body_state}\r\n              onChange={(e) => setFormData(prev => ({ ...prev, body_state: e.target.value }))}\r\n              placeholder=\"Describe what's happening in the body...\"\r\n              rows={3}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"text-sm font-medium\">Encouragement</label>\r\n            <Textarea\r\n              value={formData.encouragement || ''}\r\n              onChange={(e) => setFormData(prev => ({ ...prev, encouragement: e.target.value }))}\r\n              placeholder=\"Motivational message for this hour...\"\r\n              rows={2}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"text-sm font-medium\">Tips (one per line)</label>\r\n            <Textarea\r\n              value={tipsInput}\r\n              onChange={(e) => setTipsInput(e.target.value)}\r\n              placeholder=\"Drink water&#10;Go for a walk&#10;Practice deep breathing\"\r\n              rows={4}\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"text-sm font-medium\">Common Feelings (comma separated)</label>\r\n            <Input\r\n              value={feelingsInput}\r\n              onChange={(e) => setFeelingsInput(e.target.value)}\r\n              placeholder=\"hunger, fatigue, clarity\"\r\n            />\r\n          </div>\r\n\r\n          <div>\r\n            <label className=\"text-sm font-medium\">Scientific Info (optional)</label>\r\n            <Textarea\r\n              value={formData.scientific_info || ''}\r\n              onChange={(e) => setFormData(prev => ({ ...prev, scientific_info: e.target.value }))}\r\n              placeholder=\"Scientific explanation of what's happening...\"\r\n              rows={3}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-end gap-2 pt-4\">\r\n          <Button variant=\"outline\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleSave}>\r\n            <Save className=\"w-4 h-4 mr-2\" />\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport const AdminTimelineSettings = () => {\r\n  const [editingHour, setEditingHour] = useState<FastingHour | undefined>();\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const { toast } = useToast();\r\n  const queryClient = useQueryClient();\r\n  const { data: fastingHours = [], isLoading } = useFastingHoursQuery();\r\n\r\n  const existingHours = new Set(fastingHours.map(h => h.hour));\r\n  const missingHours = Array.from({ length: 72 }, (_, i) => i + 1).filter(h => !existingHours.has(h));\r\n\r\n  const saveFastingHour = async (fastingHour: FastingHour) => {\r\n    try {\r\n      // Client-side validation: duplicate hour check\r\n      const duplicate = fastingHours.some(h => h.hour === fastingHour.hour && h.id !== fastingHour.id);\r\n      if (duplicate) {\r\n        toast({\r\n          title: \"Duplicate hour\",\r\n          description: `Hour ${fastingHour.hour} already exists. Please choose a different hour or edit the existing one.`,\r\n          variant: \"destructive\"\r\n        });\r\n        return;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('fasting_hours')\r\n        .upsert({\r\n          id: fastingHour.id,\r\n          hour: fastingHour.hour,\r\n          day: fastingHour.day,\r\n          title: fastingHour.title,\r\n          body_state: fastingHour.body_state,\r\n          encouragement: fastingHour.encouragement,\r\n          tips: fastingHour.tips,\r\n          phase: fastingHour.phase,\r\n          difficulty: fastingHour.difficulty,\r\n          common_feelings: fastingHour.common_feelings,\r\n          scientific_info: fastingHour.scientific_info,\r\n          autophagy_milestone: fastingHour.autophagy_milestone,\r\n          ketosis_milestone: fastingHour.ketosis_milestone,\r\n          fat_burning_milestone: fastingHour.fat_burning_milestone\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: `Hour ${fastingHour.hour} timeline updated successfully`\r\n      });\r\n\r\n      // refresh cache\r\n      queryClient.invalidateQueries({ queryKey: fastingHoursKey as any });\r\n      setIsModalOpen(false);\r\n      setEditingHour(undefined);\r\n    } catch (error) {\r\n      console.error('Error saving fasting hour:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to save timeline data\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n  const deleteFastingHour = async (id: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('fasting_hours')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Success\",\r\n        description: \"Timeline hour deleted successfully\"\r\n      });\r\n\r\n      // refresh cache\r\n      queryClient.invalidateQueries({ queryKey: fastingHoursKey as any });\r\n    } catch (error) {\r\n      console.error('Error deleting fasting hour:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to delete timeline hour\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const generateMissingHours = async () => {\r\n    if (missingHours.length === 0) return;\r\n    try {\r\n      const rows = missingHours.map((h) => ({\r\n        hour: h,\r\n        day: Math.ceil(h / 24),\r\n        title: `Hour ${h}`,\r\n        body_state: \"Details coming soon\",\r\n        encouragement: \"You're doing great — keep going!\",\r\n        tips: [],\r\n        phase: 'preparation',\r\n        difficulty: 'easy',\r\n        common_feelings: [],\r\n        scientific_info: '',\r\n        autophagy_milestone: false,\r\n        ketosis_milestone: false,\r\n        fat_burning_milestone: false\r\n      }));\r\n\r\n      const { error } = await supabase.from('fasting_hours').upsert(rows);\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: \"Hours generated\",\r\n        description: `Added ${rows.length} placeholder entr${rows.length === 1 ? 'y' : 'ies'}.`\r\n      });\r\n\r\n      queryClient.invalidateQueries({ queryKey: fastingHoursKey as any });\r\n    } catch (error) {\r\n      console.error('Error generating hours:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to generate missing hours\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  const openEditModal = (fastingHour?: FastingHour) => {\r\n    setEditingHour(fastingHour);\r\n    setIsModalOpen(true);\r\n  };\r\n  if (isLoading) {\r\n    return <div className=\"text-center py-8\">Loading timeline settings...</div>;\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-base font-medium flex items-center gap-2\">\r\n          <Clock className=\"w-4 h-4\" />\r\n          Timeline Hours ({fastingHours.length}/72)\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Configure motivational content for each hour of fasting\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        {/* Add New Hour Button */}\r\n        <div className=\"flex justify-between items-center\">\r\n          <div className=\"flex gap-2\">\r\n            {missingHours.length > 0 && (\r\n              <Button variant=\"secondary\" onClick={generateMissingHours}>\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                Generate Missing ({missingHours.length})\r\n              </Button>\r\n            )}\r\n            <Button onClick={() => openEditModal()}>\r\n              <Plus className=\"w-4 h-4 mr-2\" />\r\n              Add\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Hours List */}\r\n        <div className=\"divide-y rounded-md border max-h-96 overflow-y-auto\">\r\n          {fastingHours.map((hour) => (\r\n            <div key={hour.id || hour.hour} className=\"flex items-center justify-between py-2 px-3\">\r\n              <span className=\"text-sm\">Hour {hour.hour}</span>\r\n              <div className=\"flex gap-1\">\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  onClick={() => openEditModal(hour)}\r\n                  aria-label={`Edit Hour ${hour.hour}`}\r\n                >\r\n                  <Edit className=\"w-4 h-4\" />\r\n                </Button>\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  onClick={() => hour.id && deleteFastingHour(hour.id)}\r\n                  aria-label={`Delete Hour ${hour.hour}`}\r\n                >\r\n                  <Trash2 className=\"w-4 h-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {fastingHours.length === 0 && (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            No timeline hours configured yet. Add your first hour to get started.\r\n          </div>\r\n        )}\r\n\r\n        <FastingHourEditModal\r\n          fastingHour={editingHour}\r\n          isOpen={isModalOpen}\r\n          onSave={saveFastingHour}\r\n          onClose={() => {\r\n            setIsModalOpen(false);\r\n            setEditingHour(undefined);\r\n          }}\r\n        />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};"],"names":["FastingHourEditModal","fastingHour","isOpen","onSave","onClose","formData","setFormData","useState","tipsInput","setTipsInput","feelingsInput","setFeelingsInput","useEffect","handleSave","tips","tip","feelings","f","jsx","Dialog","jsxs","DialogContent","DialogHeader","DialogTitle","DialogDescription","Input","e","hour","prev","Select","value","SelectTrigger","SelectValue","SelectContent","SelectItem","Textarea","Button","Save","AdminTimelineSettings","editingHour","setEditingHour","isModalOpen","setIsModalOpen","toast","useToast","queryClient","useQueryClient","fastingHours","isLoading","useFastingHoursQuery","existingHours","h","missingHours","_","i","saveFastingHour","error","supabase","fastingHoursKey","deleteFastingHour","id","generateMissingHours","rows","openEditModal","Card","CardHeader","CardTitle","Clock","CardDescription","CardContent","Plus","Edit","Trash2"],"mappings":"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"}