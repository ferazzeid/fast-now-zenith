{"version":3,"file":"pwaCache-DJK29_KK.js","sources":["../../src/utils/pwaCache.ts"],"sourcesContent":["import { supabase } from '@/integrations/supabase/client';\r\n\r\nexport const forcePWARefresh = async () => {\r\n  try {\r\n    console.log('Starting PWA cache refresh (preserving uploaded icons)...');\r\n    \r\n    // 1. Fetch current PWA settings from database (DO NOT overwrite them)\r\n    const { data: settingsData } = await supabase\r\n      .from('shared_settings')\r\n      .select('setting_key, setting_value')\r\n      .in('setting_key', ['app_favicon', 'app_logo', 'app_icon_url']);\r\n\r\n    const settings: Record<string, string> = {};\r\n    settingsData?.forEach(item => {\r\n      settings[item.setting_key] = item.setting_value;\r\n    });\r\n\r\n    console.log('Preserving existing PWA settings:', settings);\r\n\r\n    // 2. Update HTML icon links with cache busting (using existing URLs)\r\n    const cacheBust = `?v=${Date.now()}&refresh=${Date.now()}`;\r\n    \r\n    // Update favicon links\r\n    if (settings.app_favicon) {\r\n      const faviconLink = document.getElementById('dynamic-favicon') as HTMLLinkElement;\r\n      const shortcutIconLink = document.getElementById('dynamic-shortcut-icon') as HTMLLinkElement;\r\n      const iconLinks = document.querySelectorAll('link[rel=\"icon\"]');\r\n      \r\n      if (faviconLink) {\r\n        faviconLink.href = settings.app_favicon + cacheBust;\r\n        console.log('Updated dynamic favicon:', faviconLink.href);\r\n      }\r\n      if (shortcutIconLink) {\r\n        shortcutIconLink.href = settings.app_favicon + cacheBust;\r\n        console.log('Updated shortcut icon:', shortcutIconLink.href);\r\n      }\r\n      iconLinks.forEach((icon: any) => {\r\n        icon.href = settings.app_favicon + cacheBust;\r\n        console.log('Updated icon link:', icon.href);\r\n      });\r\n    }\r\n\r\n    // Update apple touch icons with app_icon_url or fallback to app_logo\r\n    const appIconUrl = settings.app_icon_url || settings.app_logo;\r\n    if (appIconUrl) {\r\n      const appleTouchIcons = document.querySelectorAll('link[rel=\"apple-touch-icon\"]');\r\n      appleTouchIcons.forEach((icon: any) => {\r\n        icon.href = appIconUrl + cacheBust;\r\n        console.log('Updated apple touch icon:', icon.href);\r\n      });\r\n    }\r\n    \r\n    // 3. Clear ALL browser caches\r\n    if ('caches' in window) {\r\n      const cacheNames = await caches.keys();\r\n      console.log('Clearing ALL caches:', cacheNames);\r\n      await Promise.all(\r\n        cacheNames.map(cacheName => {\r\n          console.log('Deleting cache:', cacheName);\r\n          return caches.delete(cacheName);\r\n        })\r\n      );\r\n    }\r\n\r\n    // 4. Unregister and re-register service worker for complete refresh\r\n    if ('serviceWorker' in navigator) {\r\n      const registrations = await navigator.serviceWorker.getRegistrations();\r\n      for (const registration of registrations) {\r\n        await registration.unregister();\r\n        console.log('Unregistered service worker');\r\n      }\r\n    }\r\n    \r\n    // 5. Force manifest refresh with aggressive cache busting\r\n    const manifestLink = document.querySelector('link[rel=\"manifest\"]') as HTMLLinkElement;\r\n    if (manifestLink) {\r\n      const url = new URL(manifestLink.href, window.location.origin);\r\n      url.searchParams.set('v', Date.now().toString());\r\n      url.searchParams.set('bust', Math.random().toString(36));\r\n      url.searchParams.set('refresh', Date.now().toString());\r\n      manifestLink.href = url.toString();\r\n      console.log('Manifest URL updated:', manifestLink.href);\r\n    }\r\n\r\n    // 6. Re-register service worker after delay\r\n    setTimeout(async () => {\r\n      try {\r\n        const registration = await navigator.serviceWorker.register('/sw.js');\r\n        console.log('Re-registered service worker:', registration);\r\n      } catch (error) {\r\n        console.error('Failed to re-register service worker:', error);\r\n      }\r\n    }, 1000);\r\n\r\n    // 7. Force page reload on mobile devices for complete refresh\r\n    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n    if (isMobile) {\r\n      console.log('Mobile device detected, forcing page reload in 2 seconds...');\r\n      setTimeout(() => {\r\n        console.log('Reloading page for mobile cache clear...');\r\n        location.reload();\r\n      }, 2000);\r\n    }\r\n    \r\n    console.log('PWA cache refresh completed (icons preserved)');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error refreshing PWA cache:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const validatePWAManifest = async (): Promise<{\r\n  isValid: boolean;\r\n  manifest?: any;\r\n  error?: string;\r\n}> => {\r\n  try {\r\n    const manifestLink = document.querySelector('link[rel=\"manifest\"]') as HTMLLinkElement;\r\n    if (!manifestLink) {\r\n      return { isValid: false, error: 'No manifest link found' };\r\n    }\r\n\r\n    console.log('Fetching manifest from:', manifestLink.href);\r\n\r\n    // Use fetch with no-cors mode to avoid CORS issues\r\n    const response = await fetch(manifestLink.href, {\r\n      method: 'GET',\r\n      cache: 'no-cache',\r\n      headers: {\r\n        'Cache-Control': 'no-cache, no-store, must-revalidate'\r\n      }\r\n    });\r\n\r\n    if (!response.ok) {\r\n      return { isValid: false, error: `Failed to fetch manifest: ${response.status}` };\r\n    }\r\n\r\n    const manifest = await response.json();\r\n    console.log('Manifest data:', manifest);\r\n    \r\n    // Basic validation\r\n    const requiredFields = ['name', 'short_name', 'start_url', 'display'];\r\n    const missingFields = requiredFields.filter(field => !manifest[field]);\r\n    \r\n    if (missingFields.length > 0) {\r\n      return { \r\n        isValid: false, \r\n        error: `Missing required fields: ${missingFields.join(', ')}`,\r\n        manifest \r\n      };\r\n    }\r\n\r\n    return { isValid: true, manifest };\r\n  } catch (error) {\r\n    console.error('Manifest validation error:', error);\r\n    return { \r\n      isValid: false, \r\n      error: `Error validating manifest: ${error.message}` \r\n    };\r\n  }\r\n};"],"names":["forcePWARefresh","settingsData","supabase","settings","item","cacheBust","faviconLink","shortcutIconLink","iconLinks","icon","appIconUrl","cacheNames","cacheName","registrations","registration","manifestLink","url","error"],"mappings":"6HAEO,MAAMA,EAAkB,SAAY,CACrC,GAAA,CACF,QAAQ,IAAI,2DAA2D,EAGvE,KAAM,CAAE,KAAMC,GAAiB,MAAMC,EAClC,KAAK,iBAAiB,EACtB,OAAO,4BAA4B,EACnC,GAAG,cAAe,CAAC,cAAe,WAAY,cAAc,CAAC,EAE1DC,EAAmC,CAAA,EACzCF,GAAc,QAAgBG,GAAA,CACnBD,EAAAC,EAAK,WAAW,EAAIA,EAAK,aAAA,CACnC,EAEO,QAAA,IAAI,oCAAqCD,CAAQ,EAGnD,MAAAE,EAAY,MAAM,KAAK,KAAK,YAAY,KAAK,IAAK,CAAA,GAGxD,GAAIF,EAAS,YAAa,CAClB,MAAAG,EAAc,SAAS,eAAe,iBAAiB,EACvDC,EAAmB,SAAS,eAAe,uBAAuB,EAClEC,EAAY,SAAS,iBAAiB,kBAAkB,EAE1DF,IACUA,EAAA,KAAOH,EAAS,YAAcE,EAClC,QAAA,IAAI,2BAA4BC,EAAY,IAAI,GAEtDC,IACeA,EAAA,KAAOJ,EAAS,YAAcE,EACvC,QAAA,IAAI,yBAA0BE,EAAiB,IAAI,GAEnDC,EAAA,QAASC,GAAc,CAC1BA,EAAA,KAAON,EAAS,YAAcE,EAC3B,QAAA,IAAI,qBAAsBI,EAAK,IAAI,CAAA,CAC5C,CACH,CAGM,MAAAC,EAAaP,EAAS,cAAgBA,EAAS,SAUrD,GATIO,GACsB,SAAS,iBAAiB,8BAA8B,EAChE,QAASD,GAAc,CACrCA,EAAK,KAAOC,EAAaL,EACjB,QAAA,IAAI,4BAA6BI,EAAK,IAAI,CAAA,CACnD,EAIC,WAAY,OAAQ,CAChB,MAAAE,EAAa,MAAM,OAAO,OACxB,QAAA,IAAI,uBAAwBA,CAAU,EAC9C,MAAM,QAAQ,IACZA,EAAW,IAAiBC,IAClB,QAAA,IAAI,kBAAmBA,CAAS,EACjC,OAAO,OAAOA,CAAS,EAC/B,CAAA,CAEL,CAGA,GAAI,kBAAmB,UAAW,CAChC,MAAMC,EAAgB,MAAM,UAAU,cAAc,iBAAiB,EACrE,UAAWC,KAAgBD,EACzB,MAAMC,EAAa,aACnB,QAAQ,IAAI,6BAA6B,CAE7C,CAGM,MAAAC,EAAe,SAAS,cAAc,sBAAsB,EAClE,GAAIA,EAAc,CAChB,MAAMC,EAAM,IAAI,IAAID,EAAa,KAAM,OAAO,SAAS,MAAM,EAC7DC,EAAI,aAAa,IAAI,IAAK,KAAK,IAAI,EAAE,UAAU,EAC3CA,EAAA,aAAa,IAAI,OAAQ,KAAK,SAAS,SAAS,EAAE,CAAC,EACvDA,EAAI,aAAa,IAAI,UAAW,KAAK,IAAI,EAAE,UAAU,EACxCD,EAAA,KAAOC,EAAI,WAChB,QAAA,IAAI,wBAAyBD,EAAa,IAAI,CACxD,CAGA,kBAAW,SAAY,CACjB,GAAA,CACF,MAAMD,EAAe,MAAM,UAAU,cAAc,SAAS,QAAQ,EAC5D,QAAA,IAAI,gCAAiCA,CAAY,QAClDG,EAAO,CACN,QAAA,MAAM,wCAAyCA,CAAK,CAC9D,GACC,GAAI,EAGU,iEAAiE,KAAK,UAAU,SAAS,IAExG,QAAQ,IAAI,6DAA6D,EACzE,WAAW,IAAM,CACf,QAAQ,IAAI,0CAA0C,EACtD,SAAS,OAAO,GACf,GAAI,GAGT,QAAQ,IAAI,+CAA+C,EACpD,SACAA,EAAO,CACN,eAAA,MAAM,8BAA+BA,CAAK,EAC3C,EACT,CACF"}