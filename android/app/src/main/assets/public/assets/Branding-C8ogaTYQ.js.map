{"version":3,"mappings":";2iBAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GASA,MAAMA,EAAa,CACjB,CAAC,OAAQ,CAAE,EAAG,iBAAkB,IAAK,OAAO,CAAE,EAC9C,CAAC,OAAQ,CAAE,EAAG,eAAgB,IAAK,QAAQ,CAAE,CAC/C,EACMC,EAAOC,EAAiB,OAAQF,CAAU,EC+BnCG,EAAiB,IAAsB,CAC9C,IAKA,eAAQ,IAAI,uCAAuC,EAC5C,mBA+CFC,EAAO,CACN,qBAAM,0DAA2DA,CAAK,EACvE,YACT,CACF,EAEaC,EAAwC,CACnD,MAAO,qBACP,QAAS,kBACT,YAAa,yCACb,YAAa,qBACb,SAAU,qBACV,OAAQ,GACR,UAAW,GACX,QAAS,CACP,KAAM,EACN,KAAM,OACR,EACA,UAAW,CACT,gBAAiB,CAAC,GAAG,EACrB,WAAY,GACZ,SAAU,GACV,gBAAiB,QACjB,cAAe,GACf,oBAAqB,GACrB,qBAAsB,EACxB,EACA,OAAQ,CACN,QAAS,cACT,aAAc,cACd,YAAa,cACb,OAAQ,cACR,QAAS,cACT,UAAW,cACX,gBAAiB,WACjB,eAAgB,WAChB,UAAW,WACX,SAAU,UACZ,EACA,QAAS,CACP,aAAc,UACd,iBAAkB,UAClB,YAAa,UACb,gBAAiB,UACjB,eAAgB,SAClB,CACF,EAEaC,EAAuC,CAClD,MAAO,qBACP,QAAS,kBACT,YAAa,yCACb,YAAa,qBACb,SAAU,qBACV,OAAQ,yBACR,QAAS,CACP,KAAM,IACN,KAAM,KACR,EACA,UAAW,CACT,gBAAiB,CACf,gCACA,yBACA,kCACA,oCACA,wCACA,8BACA,0BACA,wBACF,EACA,WAAY,GACZ,SAAU,GACV,gBAAiB,aACjB,cAAe,GACf,oBAAqB,GACrB,qBAAsB,EACxB,EACA,OAAQ,CACN,QAAS,cACT,aAAc,cACd,YAAa,cACb,OAAQ,cACR,QAAS,cACT,UAAW,cACX,gBAAiB,WACjB,eAAgB,WAChB,UAAW,WACX,SAAU,UACZ,EACA,QAAS,CACP,aAAc,UACd,iBAAkB,UAClB,YAAa,UACb,gBAAiB,UACjB,eAAgB,SAClB,CACF,EAEaC,EAAuB,IACtBJ,MACG,aAAeG,EAAoBD,ECpKvCG,EAAgC,IAAM,CACjD,KAAM,CAACC,EAAUC,CAAW,EAAIC,WAAsB,CACpD,QAAS,GACT,UAAW,GACX,YAAa,GACb,MAAO,GACP,aAAc,GACd,QAAS,GACT,QAAS,GACT,KAAM,GACN,WAAY,GACZ,gBAAiB,GACjB,OAAQ,GACT,EAEK,CAACC,EAASC,CAAU,EAAIF,WAAS,EAAI,EACrC,CAACG,EAAQC,CAAS,EAAIJ,WAAS,EAAK,EACpC,CAAE,MAAAK,GAAUC,IAElBC,YAAU,IAAM,CACMC,GACtB,EAAG,CAAE,GAEL,MAAMA,EAAsB,SAAY,CAClC,IACF,KAAM,CAAE,KAAAC,EAAM,MAAAhB,CAAM,EAAI,MAAMiB,EAC3B,KAAK,iBAAiB,EACtB,OAAO,4BAA4B,EACnC,GAAG,cAAe,CACjB,eACA,iBACA,kBACA,SACA,oBACA,eACA,cACA,WACA,kBACA,uBACA,cACD,EAEH,GAAIjB,EAAO,CACD,cAAM,8BAA+BA,CAAK,EACtCkB,IACZ,MACF,CAGYA,IAGN,MAAAC,EAAc,CAAE,GAAGd,GACzBW,GAAM,QAAmBI,GAAA,CACvB,OAAQA,EAAQ,YAAa,CAC3B,IAAK,eACSD,EAAA,QAAUC,EAAQ,eAAiB,wBAC/C,MACF,IAAK,iBACSD,EAAA,UAAYC,EAAQ,eAAiB,UACjD,MACF,IAAK,kBACSD,EAAA,YAAcC,EAAQ,eAAiB,8CACnD,MACF,IAAK,SACHD,EAAY,MAAQC,EAAQ,eAAiBjB,EAAA,EAAuB,MACpE,MACF,IAAK,oBACHgB,EAAY,aAAeC,EAAQ,eAAiBjB,EAAA,EAAuB,QAC3E,MACF,IAAK,eACSgB,EAAA,QAAUC,EAAQ,eAAiB,GAC/C,MACF,IAAK,cACSD,EAAA,QAAUC,EAAQ,eAAiB,GAC/C,MACF,IAAK,WACSD,EAAA,KAAOC,EAAQ,eAAiB,GAC5C,MACF,IAAK,kBACHD,EAAY,WAAaC,EAAQ,eAAiBjB,IAAuB,QAAQ,aACjF,MACF,IAAK,uBACHgB,EAAY,gBAAkBC,EAAQ,eAAiBjB,IAAuB,QAAQ,gBACtF,MACF,IAAK,cACHgB,EAAY,OAASC,EAAQ,eAAkBjB,IAAuB,WAAa,GACnF,KACJ,EACD,EAEDG,EAAYa,CAAW,QAChBnB,EAAO,CACN,cAAM,8BAA+BA,CAAK,EACtCkB,GAAA,QACZ,CACAT,EAAW,EAAK,CAClB,GAGIS,EAAc,IAAM,CACxB,MAAMG,EAAYlB,IACNG,EAAA,CACV,QAASe,EAAU,YACnB,UAAW,UACX,YAAa,8CACb,MAAOA,EAAU,MACjB,aAAcA,EAAU,QACxB,QAAS,GACT,QAAS,GACT,KAAM,GACN,WAAYA,EAAU,QAAQ,aAC9B,gBAAiBA,EAAU,QAAQ,gBACnC,OAAQA,EAAU,WAAa,GAChC,GAGGC,EAAgB,CAACC,EAAwBC,IAAkB,CAC/DlB,EAAqBmB,IAAA,CACnB,GAAGA,EACH,CAACF,CAAG,EAAGC,CACP,KAGEE,EAAkB,SAAY,CAClCf,EAAU,EAAI,EACV,IACF,MAAMgB,EAAU,CACd,CAAE,YAAa,eAAgB,cAAetB,EAAS,OAAQ,EAC/D,CAAE,YAAa,iBAAkB,cAAeA,EAAS,SAAU,EACnE,CAAE,YAAa,kBAAmB,cAAeA,EAAS,WAAY,EACtE,CAAE,YAAa,SAAU,cAAeA,EAAS,KAAM,EACvD,CAAE,YAAa,oBAAqB,cAAeA,EAAS,YAAa,EACzE,CAAE,YAAa,eAAgB,cAAeA,EAAS,OAAQ,EAC/D,CAAE,YAAa,cAAe,cAAeA,EAAS,OAAQ,EAC9D,CAAE,YAAa,WAAY,cAAeA,EAAS,IAAK,EACxD,CAAE,YAAa,kBAAmB,cAAeA,EAAS,UAAW,EACrE,CAAE,YAAa,uBAAwB,cAAeA,EAAS,eAAgB,EAC/E,CAAE,YAAa,cAAe,cAAeA,EAAS,MAAO,GAG/D,UAAWuB,KAAUD,EAAS,CAC5B,KAAM,CAAE,MAAA3B,CAAA,EAAU,MAAMiB,EACrB,KAAK,iBAAiB,EACtB,OAAOW,EAAQ,CAAE,WAAY,aAAe,GAE/C,GAAI5B,EACM,oBAAM,4BAA6BA,CAAK,EAC1CA,CAEV,CAGA,KAAM,CAAE,gBAAA6B,CAAoB,QAAAC,EAAA,gCAAAD,GAAA,KAAM,QAAO,wBAAkB,yBAAAA,CAAA,mDACpC,MAAMA,IAG3B,QAAQ,IAAI,kCAAkC,EAE9C,QAAQ,KAAK,uDAAuD,EAGhEjB,EAAA,CACJ,MAAO,oBACP,YAAa,uGACd,QACMZ,EAAO,CACN,cAAM,6BAA8BA,CAAK,EAC3CY,EAAA,CACJ,MAAO,QACP,YAAa,4BAA4BZ,EAAM,OAAO,GACtD,QAAS,cACV,SACD,CACAW,EAAU,EAAK,CACjB,GAGIoB,EAAwB,SAAY,CACpC,IAEF,MAAMC,EAAgB;AAAA;AAAA;AAAA,YAGhB3B,EAAS,KAAK;AAAA,cACZA,EAAS,YAAY;AAAA;AAAA;AAAA,YAGvBA,EAAS,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAgBrB,MAAMY,EACH,KAAK,iBAAiB,EACtB,OAAO,CACN,YAAa,2BACb,cAAee,CAAA,EACd,CAAE,WAAY,cAAe,EAE5BpB,EAAA,CACJ,MAAO,iCACP,YAAa,oHACd,QACMZ,EAAO,CACN,cAAM,qCAAsCA,CAAK,EACnDY,EAAA,CACJ,MAAO,QACP,YAAa,sCACb,QAAS,cACV,CACH,GAGF,OAAIJ,SAECyB,EACC,WAAAC,MAACC,EACC,UAAAC,OAACC,EAAU,WAAU,kCACnB,UAACH,MAAAI,EAAA,CAAS,UAAU,SAAU,GAAE,2BAElC,CACF,GACAJ,MAACK,GAAY,UAAU,wCACrB,eAAC,OAAK,WAAU,wBAAwB,sBAAU,CACpD,EACF,WAKDN,EACC,WAAAG,OAACD,EACC,WAACC,OAAAC,EAAA,CAAU,UAAU,kCACnB,UAACH,MAAAI,EAAA,CAAS,UAAU,SAAU,GAAE,2BAElC,EACCJ,EAAA,SAAE,UAAU,gCAAgC,SAE7C,yEACF,SACCK,EACC,WAAAH,EAAA,KAACI,EAAK,cAAa,WAAW,UAAU,SACtC,UAACJ,OAAAK,EAAA,CAAS,UAAU,0BAClB,UAAAL,EAAA,KAACM,EAAY,OAAM,WAAW,UAAU,0BACtC,UAACR,MAAAS,EAAA,CAAW,UAAU,SAAU,GAAE,YAEpC,EACCP,EAAA,KAAAM,EAAA,CAAY,MAAM,SAAS,UAAU,0BACpC,UAACR,MAAAU,EAAA,CAAQ,UAAU,SAAU,GAAE,UAEjC,EACCR,EAAA,KAAAM,EAAA,CAAY,MAAM,MAAM,UAAU,0BACjC,UAACR,MAAAW,EAAA,CAAM,UAAU,SAAU,GAAE,OAE/B,EACCT,EAAA,KAAAM,EAAA,CAAY,MAAM,SAAS,UAAU,0BACpC,UAACR,MAAArC,EAAA,CAAK,UAAU,SAAU,GAAE,UAE9B,GACF,EAECuC,EAAA,KAAAU,EAAA,CAAY,MAAM,WAAW,UAAU,iBACtC,UAACV,OAAA,OAAI,UAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,UAAU,SAAe,oBACxCb,EAAA,IAACc,EAAA,CACC,GAAG,UACH,MAAO3C,EAAS,QAChB,SAAW4C,GAAM3B,EAAc,UAAW2B,EAAE,OAAO,KAAK,EACxD,YAAY,wBACd,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,wDACF,EAEAE,OAAC,MAAI,WAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,YAAY,SAAU,eACrCb,EAAA,IAACc,EAAA,CACC,GAAG,YACH,MAAO3C,EAAS,UAChB,SAAW4C,GAAM3B,EAAc,YAAa2B,EAAE,OAAO,KAAK,EAC1D,YAAY,UACd,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,0DACF,EAEAE,OAAC,MAAI,WAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,cAAc,SAAW,gBACxCb,EAAA,IAACgB,EAAA,CACC,GAAG,cACH,MAAO7C,EAAS,YAChB,SAAW4C,GAAM3B,EAAc,cAAe2B,EAAE,OAAO,KAAK,EAC5D,YAAY,8CACZ,KAAM,EACR,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,4DACF,GACF,EAECA,MAAAY,EAAA,CAAY,MAAM,SAAS,UAAU,iBACpC,SAACZ,MAAA,OAAI,UAAU,kDACb,SAACE,EAAA,UAAE,UAAU,gCAAgC,gBACxCF,MAAC,UAAO,SAAK,UAAS,sLAE3B,EACF,GACF,EAECE,EAAA,KAAAU,EAAA,CAAY,MAAM,MAAM,UAAU,iBACjC,UAACV,OAAA,OAAI,UAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,aAAa,SAAW,gBACvCX,OAAC,MAAI,WAAU,aACb,UAAAF,EAAA,IAACc,EAAA,CACC,GAAG,aACH,MAAO3C,EAAS,WAChB,SAAW4C,GAAM3B,EAAc,aAAc2B,EAAE,OAAO,KAAK,EAC3D,YAAY,UACd,EACAf,EAAA,IAAC,SACC,KAAK,QACL,MAAO7B,EAAS,WAChB,SAAW4C,GAAM3B,EAAc,aAAc2B,EAAE,OAAO,KAAK,EAC3D,UAAU,wCACZ,GACF,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,wCACF,EAEAE,OAAC,MAAI,WAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,kBAAkB,SAAgB,qBACjDX,OAAC,MAAI,WAAU,aACb,UAAAF,EAAA,IAACc,EAAA,CACC,GAAG,kBACH,MAAO3C,EAAS,gBAChB,SAAW4C,GAAM3B,EAAc,kBAAmB2B,EAAE,OAAO,KAAK,EAChE,YAAY,UACd,EACAf,EAAA,IAAC,SACC,KAAK,QACL,MAAO7B,EAAS,gBAChB,SAAW4C,GAAM3B,EAAc,kBAAmB2B,EAAE,OAAO,KAAK,EAChE,UAAU,wCACZ,GACF,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,oCACF,GACF,EAECE,EAAA,KAAAU,EAAA,CAAY,MAAM,SAAS,UAAU,iBACpC,UAACV,OAAA,OAAI,UAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,QAAQ,SAA0B,+BACjDb,EAAA,IAACc,EAAA,CACC,GAAG,QACH,MAAO3C,EAAS,MAChB,SAAW4C,GAAM3B,EAAc,QAAS2B,EAAE,OAAO,KAAK,EACtD,YAAY,qBACd,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,8DACF,EAEAE,OAAC,MAAI,WAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,eAAe,SAAa,kBAC3Cb,EAAA,IAACc,EAAA,CACC,GAAG,eACH,MAAO3C,EAAS,aAChB,SAAW4C,GAAM3B,EAAc,eAAgB2B,EAAE,OAAO,KAAK,EAC7D,YAAY,kBACd,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,mDACF,EAEAE,OAAC,MAAI,WAAU,YACb,UAACF,EAAA,IAAAa,EAAA,CAAM,QAAQ,SAAS,SAAe,oBACvCb,EAAA,IAACc,EAAA,CACC,GAAG,SACH,MAAO3C,EAAS,OAChB,SAAW4C,GAAM3B,EAAc,SAAU2B,EAAE,OAAO,KAAK,EACvD,YAAY,cACd,EACCf,EAAA,SAAE,UAAU,gCAAgC,SAE7C,qCACF,EAEAE,OAAC,MAAI,WAAU,OACb,UAAAF,EAAA,IAACiB,EAAA,CACC,QAASpB,EACT,QAAQ,UACR,UAAU,SACX,qCAED,EACCG,EAAA,SAAE,UAAU,qCAAqC,SAElD,iEACF,GACF,GACF,EAEAE,OAAC,MAAI,WAAU,gCACb,UAAAF,EAAA,IAACiB,EAAA,CACC,QAASzB,EACT,SAAUhB,EACV,UAAU,SAET,WAAS,YAAc,oBAC1B,EACAwB,EAAA,IAACiB,EAAA,CACC,QAASpC,EACT,QAAQ,UACR,SAAUL,EACX,iBAED,GACF,GACF,CACF,GAEJ,ECtda0C,EAAoB,IAAM,CAC/B,MAAE,MAAAxC,GAAUC,IAEZwC,EAAkB,SAAY,CAC9B,IAEF,GAAI,WAAY,OAAQ,CAChB,MAAAC,EAAa,MAAM,OAAO,OAChC,UAAWC,KAAaD,EAChB,aAAO,OAAOC,CAAS,CAEjC,CAGA,GAAI,kBAAmB,UAAW,CAC1B,MAAAC,EAAe,MAAM,UAAU,cAAc,MAC/CA,IACF,MAAMA,EAAa,SAEfA,EAAa,QACfA,EAAa,OAAO,YAAY,CAAE,KAAM,cAAgB,GAG9D,CAGA,WAAW,IAAM,CACf,SAAS,OAAO,GACf,GAAI,EAED5C,EAAA,CACJ,MAAO,sBACP,YAAa,4GACd,QACMZ,EAAO,CACN,cAAM,8BAA+BA,CAAK,EAC5CY,EAAA,CACJ,MAAO,QACP,YAAa,iDACb,QAAS,cACV,CACH,GAGF,cACGqB,EACC,WAAAG,OAACD,EACC,WAACC,OAAAC,EAAA,CAAU,UAAU,gDACnB,UAACH,MAAAS,EAAA,CAAW,UAAU,SAAU,GAAE,kBAEpC,EACAT,MAACuB,GAAgB,SAEjB,qDACF,EACArB,OAACG,EAAY,WAAU,YACrB,UAACH,OAAA,OAAI,UAAU,gCACb,UAACF,EAAA,SAAE,UAAU,OAAO,SAAyC,8CAC7DE,OAAC,KAAG,WAAU,6CACZ,UAAAF,MAAC,MAAG,SAA+B,oCACnCA,MAAC,MAAG,SAA2D,gEAC/DA,MAAC,MAAG,SAAoD,0DAC1D,GACF,EAEAE,EAAA,KAACe,EAAA,CACC,QAASE,EACT,QAAQ,UACR,UAAU,SAEV,UAACnB,MAAAwB,EAAA,CAAU,UAAU,cAAe,GAAE,qBAExC,GACF,CACF,GAEJ,ECzEA,SAAwBC,IAAgB,CAC3B,OAAAC,EAAA,CACT,MAAO,uCACP,YAAa,uDACb,cAAe,kBAChB,EAGExB,OAAA,QAAK,UAAU,2FAA2F,KAAK,OAC9G,UAACF,EAAA,UAAG,UAAU,UAAU,SAAc,yBACrC2B,EAAY,UAEZ,UAAQ,cAAW,qCAClB,SAAA3B,MAAC9B,GAAoB,GACvB,QAEC,UAAQ,cAAW,eAClB,SAAA8B,MAAC4B,GAAmB,GACtB,QAIC,UAAQ,cAAW,iBAClB,SAAA5B,MAACkB,GAAkB,GACrB,QAGC,UAAQ,cAAW,mBAClB,SAAAlB,MAAC6B,GAAgB,GACnB,EAEC3B,EAAA,gBAAQ,aAAW,eAAe,UAAU,QAC3C,UAAAF,EAAA,IAAC8B,EAAiB,IAClB9B,MAAC,MAAI,WAAU,KAAM,IACvB,CACF,GAEJ","names":["__iconNode","Code","createLucideIcon","getEnvironment","error","DEVELOPMENT_CONFIG","PRODUCTION_CONFIG","getEnvironmentConfig","AppIdentitySettings","settings","setSettings","useState","loading","setLoading","saving","setSaving","toast","useToast","useEffect","loadCurrentSettings","data","supabase","setDefaults","newSettings","setting","envConfig","updateSetting","key","value","prev","saveAllSettings","updates","update","forcePWARefresh","__vitePreload","updateCapacitorConfig","configContent","Card","jsx","CardHeader","jsxs","CardTitle","Settings","CardContent","Tabs","TabsList","TabsTrigger","Smartphone","Palette","Globe","TabsContent","Label","Input","e","Textarea","Button","PWAManagementCard","refreshPWACache","cacheNames","cacheName","registration","CardDescription","RefreshCw","AdminBranding","usePageSEO","AdminSubnav","BrandAssetsManager","ColorManagement","AdminSEOSettings"],"ignoreList":[0],"sources":["../../node_modules/lucide-react/dist/esm/icons/code.js","../../src/config/environment.ts","../../src/components/AppIdentitySettings.tsx","../../src/components/PWAManagementCard.tsx","../../src/pages/admin/Branding.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.526.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"m16 18 6-6-6-6\", key: \"eg8j8\" }],\n  [\"path\", { d: \"m8 6-6 6 6 6\", key: \"ppft3o\" }]\n];\nconst Code = createLucideIcon(\"code\", __iconNode);\n\nexport { __iconNode, Code as default };\n//# sourceMappingURL=code.js.map\n","export type AppEnvironment = 'development' | 'production';\r\n\r\nexport interface EnvironmentConfig {\r\n  appId: string;\r\n  appName: string;\r\n  displayName: string;\r\n  packageName: string;\r\n  bundleId: string;\r\n  webUrl: string;\r\n  serverUrl?: string;\r\n  version: {\r\n    code: number;\r\n    name: string;\r\n  };\r\n  nativeApp: {\r\n    allowNavigation: string[];\r\n    fullscreen: boolean;\r\n    hideLogs: boolean;\r\n    loggingBehavior: string;\r\n    immersiveMode: boolean;\r\n    hardwareAccelerated: boolean;\r\n    usesCleartextTraffic: boolean;\r\n  };\r\n  colors: {\r\n    primary: string;\r\n    primaryHover: string;\r\n    primaryGlow: string;\r\n    accent: string;\r\n    aiColor: string;\r\n    secondary: string;\r\n    backgroundLight: string;\r\n    backgroundDark: string;\r\n    cardLight: string;\r\n    cardDark: string;\r\n  };\r\n  android: {\r\n    colorPrimary: string;\r\n    colorPrimaryDark: string;\r\n    colorAccent: string;\r\n    backgroundLight: string;\r\n    backgroundDark: string;\r\n  };\r\n}\r\n\r\nexport const getEnvironment = (): AppEnvironment => {\r\n  try {\r\n    // CRITICAL: Enhanced detection for AAB builds\r\n    \r\n    // Method 1: Check build environment first (most reliable)\r\n    if (process.env.NODE_ENV === 'production' || process.env.PROD === 'true') {\r\n      console.log('🔥 PRODUCTION MODE: NODE_ENV detected');\r\n      return 'production';\r\n    }\r\n    \r\n    // Method 2: Check for Capacitor object (native app)\r\n    if (typeof window !== 'undefined' && (window as any).Capacitor) {\r\n      console.log('🔥 NATIVE APP DETECTED: Capacitor object');\r\n      return 'production';\r\n    }\r\n    \r\n    // Method 2b: AAB build detection (critical for production builds)\r\n    if (typeof window !== 'undefined') {\r\n      const isAABBuild = \r\n        document.documentElement.getAttribute('data-build-type') === 'aab' ||\r\n        window.location.origin.includes('android_asset') ||\r\n        (window as any).AndroidInterface ||\r\n        navigator.userAgent.includes('wv') ||\r\n        window.location.href.includes('android_asset');\r\n      \r\n      if (isAABBuild) {\r\n        console.log('🔥 AAB BUILD DETECTED: Production mode forced');\r\n        return 'production';\r\n      }\r\n    }\r\n    \r\n    // Method 3: Check for force production flag\r\n    if (typeof window !== 'undefined' && (window as any).__FORCE_PRODUCTION__) {\r\n      console.log('🔥 PRODUCTION MODE: force flag');\r\n      return 'production';\r\n    }\r\n    \r\n    // Method 4: Check for capacitor protocol\r\n    if (typeof window !== 'undefined' && window.location.protocol === 'capacitor:') {\r\n      console.log('🔥 NATIVE APP DETECTED: capacitor protocol');\r\n      return 'production';\r\n    }\r\n    \r\n    // Method 5: Check for HTTPS in non-localhost (usually production)\r\n    if (typeof window !== 'undefined' && \r\n        window.location.protocol === 'https:' && \r\n        !window.location.hostname.includes('localhost') && \r\n        !window.location.hostname.includes('127.0.0.1')) {\r\n      console.log('🔥 PRODUCTION MODE: HTTPS non-localhost');\r\n      return 'production';\r\n    }\r\n    \r\n    console.log('🔥 DEVELOPMENT MODE: No production indicators found');\r\n    return 'development';\r\n  } catch (error) {\r\n    console.error('Environment detection failed, defaulting to production:', error);\r\n    return 'production'; // Safer default for AAB builds\r\n  }\r\n};\r\n\r\nexport const DEVELOPMENT_CONFIG: EnvironmentConfig = {\r\n  appId: 'com.fastnow.zenith', // Temporarily use production package name for OAuth\r\n  appName: 'fast-now-zenith',\r\n  displayName: 'fast now - The No-BS Fat Loss Protocol',\r\n  packageName: 'com.fastnow.zenith', // Temporarily use production package name for OAuth\r\n  bundleId: 'com.fastnow.zenith', // Temporarily use production package name for OAuth\r\n  webUrl: '',\r\n  serverUrl: '',\r\n  version: {\r\n    code: 1,\r\n    name: '1.0.0',\r\n  },\r\n  nativeApp: {\r\n    allowNavigation: ['*'],\r\n    fullscreen: false,\r\n    hideLogs: false,\r\n    loggingBehavior: 'debug',\r\n    immersiveMode: false,\r\n    hardwareAccelerated: true,\r\n    usesCleartextTraffic: true,\r\n  },\r\n  colors: {\r\n    primary: '220 13% 45%', // Neutral gray - emergency fallback only\r\n    primaryHover: '220 13% 40%',\r\n    primaryGlow: '220 13% 55%',\r\n    accent: '220 13% 50%',\r\n    aiColor: '220 13% 50%',\r\n    secondary: '220 13% 40%',\r\n    backgroundLight: '0 0% 96%',\r\n    backgroundDark: '0 0% 11%',\r\n    cardLight: '0 0% 98%',\r\n    cardDark: '0 0% 10%',\r\n  },\r\n  android: {\r\n    colorPrimary: '#6B7280', // Neutral - will be replaced by database colors\r\n    colorPrimaryDark: '#4B5563',\r\n    colorAccent: '#6B7280',\r\n    backgroundLight: '#F5F5F5',\r\n    backgroundDark: '#1C1C1C',\r\n  }\r\n};\r\n\r\nexport const PRODUCTION_CONFIG: EnvironmentConfig = {\r\n  appId: 'com.fastnow.zenith',\r\n  appName: 'fast-now-zenith',\r\n  displayName: 'fast now - The No-BS Fat Loss Protocol',\r\n  packageName: 'com.fastnow.zenith',\r\n  bundleId: 'com.fastnow.zenith',\r\n  webUrl: 'https://go.fastnow.app',\r\n  version: {\r\n    code: 114,\r\n    name: '114',\r\n  },\r\n  nativeApp: {\r\n    allowNavigation: [\r\n      'https://accounts.google.com/*',\r\n      'https://*.google.com/*',\r\n      'https://oauth2.googleapis.com/*',\r\n      'https://*.googleusercontent.com/*',\r\n      'https://oauth.googleusercontent.com/*',\r\n      'https://appleid.apple.com/*',\r\n      'https://*.supabase.co/*',\r\n      'com.fastnow.zenith://*'\r\n    ],\r\n    fullscreen: false, // Allow navigation bars for OAuth\r\n    hideLogs: false, // Keep logs for OAuth debugging\r\n    loggingBehavior: 'production', // Limited but present\r\n    immersiveMode: true,\r\n    hardwareAccelerated: true,\r\n    usesCleartextTraffic: false,\r\n  },\r\n  colors: {\r\n    primary: '220 13% 45%', // Neutral gray - emergency fallback only\r\n    primaryHover: '220 13% 40%',\r\n    primaryGlow: '220 13% 55%',\r\n    accent: '220 13% 50%',\r\n    aiColor: '220 13% 50%',\r\n    secondary: '220 13% 40%',\r\n    backgroundLight: '0 0% 96%',\r\n    backgroundDark: '0 0% 11%',\r\n    cardLight: '0 0% 98%',\r\n    cardDark: '0 0% 10%',\r\n  },\r\n  android: {\r\n    colorPrimary: '#6B7280', // Neutral - will be replaced by database colors\r\n    colorPrimaryDark: '#4B5563',\r\n    colorAccent: '#6B7280',\r\n    backgroundLight: '#F5F5F5',\r\n    backgroundDark: '#1C1C1C',\r\n  }\r\n};\r\n\r\nexport const getEnvironmentConfig = (): EnvironmentConfig => {\r\n  const env = getEnvironment();\r\n  return env === 'production' ? PRODUCTION_CONFIG : DEVELOPMENT_CONFIG;\r\n};\r\n\r\nexport const isDevelopment = (): boolean => getEnvironment() === 'development';\r\nexport const isProduction = (): boolean => getEnvironment() === 'production';","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { Settings, Smartphone, Globe, Code, Palette } from \"lucide-react\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { ImageUpload } from \"@/components/ImageUpload\";\r\nimport { getEnvironmentConfig, isDevelopment } from \"@/config/environment\";\r\n\r\ninterface AppSettings {\r\n  // App Identity\r\n  appName: string;\r\n  shortName: string;\r\n  description: string;\r\n  appId: string;\r\n  internalName: string;\r\n  \r\n  // Visual Assets\r\n  appIcon: string;\r\n  favicon: string;\r\n  logo: string;\r\n  \r\n  // PWA Settings\r\n  themeColor: string;\r\n  backgroundColor: string;\r\n  \r\n  // Capacitor Settings\r\n  webUrl: string;\r\n}\r\n\r\nexport const AppIdentitySettings: React.FC = () => {\r\n  const [settings, setSettings] = useState<AppSettings>({\r\n    appName: '',\r\n    shortName: '',\r\n    description: '',\r\n    appId: '',\r\n    internalName: '',\r\n    appIcon: '',\r\n    favicon: '',\r\n    logo: '',\r\n    themeColor: '',\r\n    backgroundColor: '',\r\n    webUrl: ''\r\n  });\r\n  \r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  useEffect(() => {\r\n    loadCurrentSettings();\r\n  }, []);\r\n\r\n  const loadCurrentSettings = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('shared_settings')\r\n        .select('setting_key, setting_value')\r\n        .in('setting_key', [\r\n          'pwa_app_name',\r\n          'pwa_short_name', \r\n          'pwa_description',\r\n          'app_id',\r\n          'app_internal_name',\r\n          'app_icon_url',\r\n          'app_favicon',\r\n          'app_logo',\r\n          'pwa_theme_color',\r\n          'pwa_background_color',\r\n          'app_web_url'\r\n        ]);\r\n\r\n      if (error) {\r\n        console.error('Error loading app settings:', error);\r\n        setDefaults();\r\n        return;\r\n      }\r\n\r\n      // Set defaults first\r\n      setDefaults();\r\n\r\n      // Then override with database values if they exist\r\n      const newSettings = { ...settings };\r\n      data?.forEach(setting => {\r\n        switch (setting.setting_key) {\r\n          case 'pwa_app_name':\r\n            newSettings.appName = setting.setting_value || 'FastNow - Mindful App';\r\n            break;\r\n          case 'pwa_short_name':\r\n            newSettings.shortName = setting.setting_value || 'FastNow';\r\n            break;\r\n          case 'pwa_description':\r\n            newSettings.description = setting.setting_value || 'Your mindful app with AI-powered motivation';\r\n            break;\r\n          case 'app_id':\r\n            newSettings.appId = setting.setting_value || getEnvironmentConfig().appId;\r\n            break;\r\n          case 'app_internal_name':\r\n            newSettings.internalName = setting.setting_value || getEnvironmentConfig().appName;\r\n            break;\r\n          case 'app_icon_url':\r\n            newSettings.appIcon = setting.setting_value || '';\r\n            break;\r\n          case 'app_favicon':\r\n            newSettings.favicon = setting.setting_value || '';\r\n            break;\r\n          case 'app_logo':\r\n            newSettings.logo = setting.setting_value || '';\r\n            break;\r\n          case 'pwa_theme_color':\r\n            newSettings.themeColor = setting.setting_value || getEnvironmentConfig().android.colorPrimary;\r\n            break;\r\n          case 'pwa_background_color':\r\n            newSettings.backgroundColor = setting.setting_value || getEnvironmentConfig().android.backgroundLight;\r\n            break;\r\n          case 'app_web_url':\r\n            newSettings.webUrl = setting.setting_value || (getEnvironmentConfig().serverUrl || '');\r\n            break;\r\n        }\r\n      });\r\n      \r\n      setSettings(newSettings);\r\n    } catch (error) {\r\n      console.error('Error loading app settings:', error);\r\n      setDefaults();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const setDefaults = () => {\r\n    const envConfig = getEnvironmentConfig();\r\n    setSettings({\r\n      appName: envConfig.displayName,\r\n      shortName: 'FastNow',\r\n      description: 'Your mindful app with AI-powered motivation',\r\n      appId: envConfig.appId,\r\n      internalName: envConfig.appName,\r\n      appIcon: '',\r\n      favicon: '',\r\n      logo: '',\r\n      themeColor: envConfig.android.colorPrimary,\r\n      backgroundColor: envConfig.android.backgroundLight,\r\n      webUrl: envConfig.serverUrl || ''\r\n    });\r\n  };\r\n\r\n  const updateSetting = (key: keyof AppSettings, value: string) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      [key]: value\r\n    }));\r\n  };\r\n\r\n  const saveAllSettings = async () => {\r\n    setSaving(true);\r\n    try {\r\n      const updates = [\r\n        { setting_key: 'pwa_app_name', setting_value: settings.appName },\r\n        { setting_key: 'pwa_short_name', setting_value: settings.shortName },\r\n        { setting_key: 'pwa_description', setting_value: settings.description },\r\n        { setting_key: 'app_id', setting_value: settings.appId },\r\n        { setting_key: 'app_internal_name', setting_value: settings.internalName },\r\n        { setting_key: 'app_icon_url', setting_value: settings.appIcon },\r\n        { setting_key: 'app_favicon', setting_value: settings.favicon },\r\n        { setting_key: 'app_logo', setting_value: settings.logo },\r\n        { setting_key: 'pwa_theme_color', setting_value: settings.themeColor },\r\n        { setting_key: 'pwa_background_color', setting_value: settings.backgroundColor },\r\n        { setting_key: 'app_web_url', setting_value: settings.webUrl }\r\n      ];\r\n\r\n      for (const update of updates) {\r\n        const { error } = await supabase\r\n          .from('shared_settings')\r\n          .upsert(update, { onConflict: 'setting_key' });\r\n\r\n        if (error) {\r\n          console.error('Error saving app setting:', error);\r\n          throw error;\r\n        }\r\n      }\r\n\r\n      // Force PWA cache refresh and manifest update\r\n      const { forcePWARefresh } = await import('@/utils/pwaCache');\r\n      const refreshSuccess = await forcePWARefresh();\r\n      \r\n      if (refreshSuccess) {\r\n        console.log('PWA cache refreshed successfully');\r\n      } else {\r\n        console.warn('PWA cache refresh had issues, but settings were saved');\r\n      }\r\n\r\n      toast({\r\n        title: \"✅ Settings Saved!\",\r\n        description: \"App identity settings updated successfully. PWA manifest refreshed - try 'Add to Home Screen' again!\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving app settings:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: `Failed to save settings: ${error.message}`,\r\n        variant: \"destructive\",\r\n      });\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const updateCapacitorConfig = async () => {\r\n    try {\r\n      // This would generate a new capacitor.config.ts file with the updated settings\r\n      const configContent = `import type { CapacitorConfig } from '@capacitor/cli';\r\n\r\nconst config: CapacitorConfig = {\r\n  appId: '${settings.appId}',\r\n  appName: '${settings.internalName}',\r\n  webDir: 'dist',\r\n  server: {\r\n    url: '${settings.webUrl}',\r\n    cleartext: true\r\n  },\r\n  plugins: {\r\n    SplashScreen: {\r\n      launchShowDuration: 0\r\n    },\r\n    StatusBar: {\r\n      style: 'default'\r\n    }\r\n  }\r\n};\r\n\r\nexport default config;`;\r\n\r\n      // Save to settings for reference\r\n      await supabase\r\n        .from('shared_settings')\r\n        .upsert({ \r\n          setting_key: 'capacitor_config_content', \r\n          setting_value: configContent \r\n        }, { onConflict: 'setting_key' });\r\n\r\n      toast({\r\n        title: \"🚀 Capacitor Config Generated!\",\r\n        description: \"The capacitor.config.ts file content has been generated. Copy it to your local project after exporting to GitHub.\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error generating capacitor config:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to generate Capacitor config\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg flex items-center gap-2\">\r\n            <Settings className=\"w-5 h-5\" />\r\n            App Identity & Branding\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center py-8\">\r\n          <span className=\"text-muted-foreground\">Loading...</span>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-lg flex items-center gap-2\">\r\n          <Settings className=\"w-5 h-5\" />\r\n          App Identity & Branding\r\n        </CardTitle>\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          Configure your app's name, icons, and branding across all platforms\r\n        </p>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <Tabs defaultValue=\"identity\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger value=\"identity\" className=\"flex items-center gap-1\">\r\n              <Smartphone className=\"w-4 h-4\" />\r\n              Identity\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"assets\" className=\"flex items-center gap-1\">\r\n              <Palette className=\"w-4 h-4\" />\r\n              Assets\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"pwa\" className=\"flex items-center gap-1\">\r\n              <Globe className=\"w-4 h-4\" />\r\n              PWA\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"native\" className=\"flex items-center gap-1\">\r\n              <Code className=\"w-4 h-4\" />\r\n              Native\r\n            </TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"identity\" className=\"space-y-4 mt-6\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"appName\">App Name (Full)</Label>\r\n              <Input\r\n                id=\"appName\"\r\n                value={settings.appName}\r\n                onChange={(e) => updateSetting('appName', e.target.value)}\r\n                placeholder=\"FastNow - Mindful App\"\r\n              />\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                The full name shown in app stores and browser tabs\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"shortName\">Short Name</Label>\r\n              <Input\r\n                id=\"shortName\"\r\n                value={settings.shortName}\r\n                onChange={(e) => updateSetting('shortName', e.target.value)}\r\n                placeholder=\"FastNow\"\r\n              />\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Short name for home screen icons (12 characters max)\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"description\">Description</Label>\r\n              <Textarea\r\n                id=\"description\"\r\n                value={settings.description}\r\n                onChange={(e) => updateSetting('description', e.target.value)}\r\n                placeholder=\"Your mindful app with AI-powered motivation\"\r\n                rows={3}\r\n              />\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                App description for app stores and PWA install prompts\r\n              </p>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"assets\" className=\"space-y-6 mt-6\">\r\n            <div className=\"p-4 border border-border rounded-lg bg-muted/20\">\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                🔄 <strong>Note:</strong> Asset uploads have been moved to the dedicated \"Brand Assets\" section below to avoid conflicts. \r\n                Use the Brand Assets Manager below for uploading your app icon, favicon, and logo.\r\n              </p>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"pwa\" className=\"space-y-4 mt-6\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"themeColor\">Theme Color</Label>\r\n              <div className=\"flex gap-2\">\r\n                <Input\r\n                  id=\"themeColor\"\r\n                  value={settings.themeColor}\r\n                  onChange={(e) => updateSetting('themeColor', e.target.value)}\r\n                  placeholder=\"#8B7355\"\r\n                />\r\n                <input\r\n                  type=\"color\"\r\n                  value={settings.themeColor}\r\n                  onChange={(e) => updateSetting('themeColor', e.target.value)}\r\n                  className=\"w-12 h-10 rounded border border-input\"\r\n                />\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Browser and status bar theme color\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"backgroundColor\">Background Color</Label>\r\n              <div className=\"flex gap-2\">\r\n                <Input\r\n                  id=\"backgroundColor\"\r\n                  value={settings.backgroundColor}\r\n                  onChange={(e) => updateSetting('backgroundColor', e.target.value)}\r\n                  placeholder=\"#F5F2EA\"\r\n                />\r\n                <input\r\n                  type=\"color\"\r\n                  value={settings.backgroundColor}\r\n                  onChange={(e) => updateSetting('backgroundColor', e.target.value)}\r\n                  className=\"w-12 h-10 rounded border border-input\"\r\n                />\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Splash screen background color\r\n              </p>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"native\" className=\"space-y-4 mt-6\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"appId\">App ID (Bundle Identifier)</Label>\r\n              <Input\r\n                id=\"appId\"\r\n                value={settings.appId}\r\n                onChange={(e) => updateSetting('appId', e.target.value)}\r\n                placeholder=\"com.fastnow.zenith\"\r\n              />\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Unique identifier for app stores (reverse domain format)\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"internalName\">Internal Name</Label>\r\n              <Input\r\n                id=\"internalName\"\r\n                value={settings.internalName}\r\n                onChange={(e) => updateSetting('internalName', e.target.value)}\r\n                placeholder=\"fast-now-zenith\"\r\n              />\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Internal project name (kebab-case, no spaces)\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"webUrl\">Development URL</Label>\r\n              <Input\r\n                id=\"webUrl\"\r\n                value={settings.webUrl}\r\n                onChange={(e) => updateSetting('webUrl', e.target.value)}\r\n                placeholder=\"https://...\"\r\n              />\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Live reload URL for development\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"pt-4\">\r\n              <Button \r\n                onClick={updateCapacitorConfig} \r\n                variant=\"outline\"\r\n                className=\"w-full\"\r\n              >\r\n                Generate Capacitor Config\r\n              </Button>\r\n              <p className=\"text-xs text-muted-foreground mt-2\">\r\n                Generate capacitor.config.ts content for your local project\r\n              </p>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        <div className=\"flex gap-3 pt-6 mt-6 border-t\">\r\n          <Button \r\n            onClick={saveAllSettings} \r\n            disabled={saving}\r\n            className=\"flex-1\"\r\n          >\r\n            {saving ? 'Saving...' : 'Save All Settings'}\r\n          </Button>\r\n          <Button \r\n            onClick={loadCurrentSettings} \r\n            variant=\"outline\"\r\n            disabled={saving}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","import React from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { RefreshCw, Smartphone } from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport const PWAManagementCard = () => {\r\n  const { toast } = useToast();\r\n\r\n  const refreshPWACache = async () => {\r\n    try {\r\n      // Clear existing PWA caches\r\n      if ('caches' in window) {\r\n        const cacheNames = await caches.keys();\r\n        for (const cacheName of cacheNames) {\r\n          await caches.delete(cacheName);\r\n        }\r\n      }\r\n\r\n      // Update service worker\r\n      if ('serviceWorker' in navigator) {\r\n        const registration = await navigator.serviceWorker.ready;\r\n        if (registration) {\r\n          await registration.update();\r\n          // Send message to service worker if it has an active worker\r\n          if (registration.active) {\r\n            registration.active.postMessage({ type: 'SKIP_WAITING' });\r\n          }\r\n        }\r\n      }\r\n\r\n      // Force reload to get fresh assets\r\n      setTimeout(() => {\r\n        location.reload();\r\n      }, 1000);\r\n\r\n      toast({\r\n        title: \"PWA Cache Refreshed\",\r\n        description: \"Your app will reload with the latest assets. Changes to icons may take effect after reinstalling the app.\",\r\n      });\r\n    } catch (error) {\r\n      console.error('Error refreshing PWA cache:', error);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to refresh PWA cache. Please try again.\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-base font-medium flex items-center gap-2\">\r\n          <Smartphone className=\"w-4 h-4\" />\r\n          PWA Management\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Update your app's home screen icon and manifest\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"text-sm text-muted-foreground\">\r\n          <p className=\"mb-2\">After updating your logo or app settings:</p>\r\n          <ol className=\"list-decimal list-inside space-y-1 text-xs\">\r\n            <li>Click \"Refresh PWA Cache\" below</li>\r\n            <li>Remove the app from your home screen (if already installed)</li>\r\n            <li>Add the app to home screen again to see the new icon</li>\r\n          </ol>\r\n        </div>\r\n        \r\n        <Button \r\n          onClick={refreshPWACache}\r\n          variant=\"outline\"\r\n          className=\"w-full\"\r\n        >\r\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n          Refresh PWA Cache\r\n        </Button>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","import { AdminSubnav } from \"@/components/AdminSubnav\";\r\nimport { usePageSEO } from \"@/hooks/usePageSEO\";\r\nimport BrandAssetsManager from \"@/components/BrandAssetsManager\";\r\nimport { ColorManagement } from \"@/components/ColorManagement\";\r\nimport { AdminSEOSettings } from \"@/components/AdminSEOSettings\";\r\nimport { AppIdentitySettings } from \"@/components/AppIdentitySettings\";\r\nimport { PWAManagementCard } from \"@/components/PWAManagementCard\";\r\n\r\n\r\nexport default function AdminBranding() {\r\n  usePageSEO({\r\n    title: \"Admin Branding – Logos, Colors & SEO\",\r\n    description: \"Manage brand assets, color themes, and SEO settings.\",\r\n    canonicalPath: \"/admin/branding\",\r\n  });\r\n\r\n  return (\r\n    <main className=\"container mx-auto p-6 space-y-8 overflow-x-hidden bg-background min-h-[calc(100vh-80px)]\" role=\"main\">\r\n      <h1 className=\"sr-only\">Admin Branding</h1>\r\n      <AdminSubnav />\r\n\r\n      <section aria-label=\"App identity and branding settings\">\r\n        <AppIdentitySettings />\r\n      </section>\r\n\r\n      <section aria-label=\"Brand assets\">\r\n        <BrandAssetsManager />\r\n      </section>\r\n\r\n      {/* PWA Icon Uploader removed - using individual uploads in BrandAssetsManager instead */}\r\n\r\n      <section aria-label=\"PWA management\">\r\n        <PWAManagementCard />\r\n      </section>\r\n\r\n\r\n      <section aria-label=\"Color management\">\r\n        <ColorManagement />\r\n      </section>\r\n\r\n      <section aria-label=\"SEO settings\" className=\"pb-24\">\r\n        <AdminSEOSettings />\r\n        <div className=\"h-8\" />\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n"],"file":"assets/Branding-C8ogaTYQ.js"}