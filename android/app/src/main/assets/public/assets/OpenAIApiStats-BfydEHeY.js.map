{"version":3,"file":"OpenAIApiStats-BfydEHeY.js","sources":["../../src/components/OpenAIApiStats.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { supabase } from \"@/integrations/supabase/client\";\r\nimport { LoadingSpinner } from \"@/components/LoadingSpinner\";\r\n\r\ninterface ApiStats {\r\n  totalRequests: number;\r\n  totalCost: number;\r\n  requestsToday: number;\r\n  costToday: number;\r\n  averageRequestsPerDay: number;\r\n  mostUsedModel: string;\r\n  successRate: number;\r\n}\r\n\r\nexport const OpenAIApiStats: React.FC = () => {\r\n  const [stats, setStats] = useState<ApiStats>({\r\n    totalRequests: 0,\r\n    totalCost: 0,\r\n    requestsToday: 0,\r\n    costToday: 0,\r\n    averageRequestsPerDay: 0,\r\n    mostUsedModel: 'N/A',\r\n    successRate: 0\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchApiStats();\r\n  }, []);\r\n\r\n  const fetchApiStats = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Get usage data from the last 30 days\r\n      const thirtyDaysAgo = new Date();\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n      \r\n      const today = new Date();\r\n      today.setHours(0, 0, 0, 0);\r\n      \r\n      const { data: usageData, error } = await supabase\r\n        .from('ai_usage_logs')\r\n        .select('*')\r\n        .gte('created_at', thirtyDaysAgo.toISOString())\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error fetching API stats:', error);\r\n        return;\r\n      }\r\n\r\n      if (!usageData || usageData.length === 0) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      // Calculate statistics\r\n      const totalRequests = usageData.length;\r\n      const totalCost = usageData.reduce((sum, log) => sum + (log.estimated_cost || 0), 0);\r\n      \r\n      // Today's stats\r\n      const todayData = usageData.filter(log => \r\n        new Date(log.created_at) >= today\r\n      );\r\n      const requestsToday = todayData.length;\r\n      const costToday = todayData.reduce((sum, log) => sum + (log.estimated_cost || 0), 0);\r\n      \r\n      // Average requests per day (last 30 days)\r\n      const averageRequestsPerDay = Math.round(totalRequests / 30);\r\n      \r\n      // Most used model\r\n      const modelCounts: Record<string, number> = {};\r\n      usageData.forEach(log => {\r\n        if (log.model_used) {\r\n          modelCounts[log.model_used] = (modelCounts[log.model_used] || 0) + 1;\r\n        }\r\n      });\r\n      \r\n      const mostUsedModel = Object.keys(modelCounts).length > 0 \r\n        ? Object.entries(modelCounts).sort(([,a], [,b]) => b - a)[0][0]\r\n        : 'N/A';\r\n      \r\n      // Success rate (assuming no errors means success)\r\n      const successfulRequests = usageData.filter(log => !log.request_type?.includes('error')).length;\r\n      const successRate = totalRequests > 0 ? Math.round((successfulRequests / totalRequests) * 100) : 0;\r\n\r\n      setStats({\r\n        totalRequests,\r\n        totalCost,\r\n        requestsToday,\r\n        costToday,\r\n        averageRequestsPerDay,\r\n        mostUsedModel,\r\n        successRate\r\n      });\r\n    } catch (error) {\r\n      console.error('Error calculating API stats:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>OpenAI API Statistics</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"flex items-center justify-center py-8\">\r\n          <LoadingSpinner />\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"text-lg\">\r\n          OpenAI API Statistics\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          {/* Left Column */}\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex justify-between items-center p-2 bg-muted/50 rounded-lg\">\r\n              <span className=\"text-xs text-muted-foreground\">Total Requests</span>\r\n              <span className=\"text-sm font-semibold text-foreground\">{stats.totalRequests.toLocaleString()}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between items-center p-2 bg-muted/50 rounded-lg\">\r\n              <span className=\"text-xs text-muted-foreground\">Requests Today</span>\r\n              <span className=\"text-sm font-semibold text-foreground\">{stats.requestsToday.toLocaleString()}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between items-center p-2 bg-muted/50 rounded-lg\">\r\n              <span className=\"text-xs text-muted-foreground\">Daily Average</span>\r\n              <span className=\"text-sm font-semibold text-foreground\">{stats.averageRequestsPerDay.toLocaleString()}</span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Right Column */}\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex justify-between items-center p-2 bg-muted/50 rounded-lg\">\r\n              <span className=\"text-xs text-muted-foreground\">Total Cost</span>\r\n              <span className=\"text-sm font-semibold text-foreground\">${stats.totalCost.toFixed(2)}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between items-center p-2 bg-muted/50 rounded-lg\">\r\n              <span className=\"text-xs text-muted-foreground whitespace-nowrap\">Today's Cost</span>\r\n              <span className=\"text-sm font-semibold text-foreground\">${stats.costToday.toFixed(2)}</span>\r\n            </div>\r\n            \r\n            <div className=\"flex justify-between items-center p-2 bg-muted/50 rounded-lg\">\r\n              <span className=\"text-xs text-muted-foreground\">Success Rate</span>\r\n              <span className=\"text-sm font-semibold text-foreground\">{stats.successRate}%</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};"],"names":["OpenAIApiStats","stats","setStats","useState","loading","setLoading","useEffect","fetchApiStats","thirtyDaysAgo","today","usageData","error","supabase","totalRequests","totalCost","sum","log","todayData","requestsToday","costToday","averageRequestsPerDay","modelCounts","mostUsedModel","a","b","successfulRequests","successRate","Card","jsx","CardHeader","CardTitle","CardContent","LoadingSpinner","jsxs"],"mappings":"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"}